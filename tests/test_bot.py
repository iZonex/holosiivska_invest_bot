import os
import pytest
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.ext._application import ApplicationBuilder
from unittest.mock import AsyncMock

from bot.app import start, button

@pytest.mark.asyncio
async def test_start_command():
    # Arrange
    mock_update = AsyncMock(Update)
    mock_context = AsyncMock(ContextTypes.DEFAULT_TYPE)
    
    # Act
    await start(mock_update, mock_context)
    
    # Assert
    mock_update.message.reply_text.assert_called_once_with(
        '–í—ñ—Ç–∞—é, —è –±–æ—Ç –ì–û ¬´–Ü–Ω–≤–µ—Å—Ç–æ—Ä–∏ –ñ–ö ¬´–ì–æ–ª–æ—Å—ñ—ó–≤—Å—å–∫–∞ –¥–æ–ª–∏–Ω–∞¬ª, –æ–±–µ—Ä—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π —Ä–æ–∑–¥—ñ–ª:',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ì–û", callback_data='info'), 
             InlineKeyboardButton("üìÑ –î–æ–∫—É–º–µ–Ω—Ç–∏ –ì–û", callback_data='documents')],
            [InlineKeyboardButton("‚úçÔ∏è –Ø–∫ –≤—Å—Ç—É–ø–∏—Ç–∏ –≤ –ì–û", callback_data='join')],
            [InlineKeyboardButton("‚ùì –ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞?", callback_data='help')]
        ])
    )

@pytest.mark.asyncio
async def test_button_info():
    # Arrange
    mock_update = AsyncMock(Update)
    mock_context = AsyncMock(ContextTypes.DEFAULT_TYPE)
    mock_update.callback_query.data = 'info'
    
    # Act
    await button(mock_update, mock_context)
    
    # Assert
    mock_update.callback_query.edit_message_text.assert_called_once_with(
        "9 —Å–µ—Ä–ø–Ω—è 2023 —Ä. –±—É–ª–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –ì—Ä–æ–º–∞–¥—Å—å–∫—É –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—é ‚Äú–Ü–Ω–≤–µ—Å—Ç–æ—Ä–∏ –ñ–ö ‚Äú–ì–æ–ª–æ—Å—ñ—ó–≤—Å—å–∫–∞ –¥–æ–ª–∏–Ω–∞‚Äù, "
        "–æ—Å–Ω–æ–≤–Ω–æ—é –º–µ—Ç–æ—é —è–∫–æ—ó —î —Å–ø—Ä–∏—è–Ω–Ω—è —è–∫–Ω–∞–π—à–≤–∏–¥—à–æ–º—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—é —ñ–Ω–≤–µ—Å—Ç–æ—Ä–∞–º–∏ —Ä–µ—á–æ–≤–∏—Ö –ø—Ä–∞–≤ –Ω–∞ —Å–≤–æ—ó –æ–±‚Äô—î–∫—Ç–∏ —ñ–Ω–≤–µ—Å—Ç—É–≤–∞–Ω–Ω—è. "
        "–ì–û ‚Äì —Ü–µ —é—Ä–∏–¥–∏—á–Ω–∞ –æ—Å–æ–±–∞, —è–∫–∞ –¥—ñ—î –≤ –º–µ–∂–∞—Ö —Ç–∞ —Å–ø–æ—Å—ñ–± —á–∏–Ω–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–∞ –£–∫—Ä–∞—ó–Ω–∏.\n\n"
        "–ö–µ—Ä—ñ–≤–Ω–∏—Ü—Ç–≤–æ –ì–û ‚Äì –ü—Ä–∏—â–µ–ø–∞ –ú–∏–∫–æ–ª–∞ —Ç–∞ –Ñ–≤—Å—é–∫–æ–≤ –†–æ–¥—ñ–æ–Ω.\n\n"
        "üèõÔ∏è **–Æ—Ä–∏–¥–∏—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è**\n\n"
        "**–ö–æ–¥:** 45326768\n"
        "**–ê–¥—Ä–µ—Å–∞:** –£–∫—Ä–∞—ó–Ω–∞, 03022, –º—ñ—Å—Ç–æ –ö–∏—ó–≤, –≤—É–ª–∏—Ü—è –•–æ–ª–æ–¥–Ω–æ—è—Ä—Å—å–∫–∞, –±—É–¥–∏–Ω–æ–∫ 7/9\n"
        "**–ö–µ—Ä—ñ–≤–Ω–∏–∫:** –ü—Ä–∏—â–µ–ø–∞ –ú–∏–∫–æ–ª–∞ –ú–∏–∫–æ–ª–∞–π–æ–≤–∏—á\n"
        "**–î—ñ—è–ª—å–Ω—ñ—Å—Ç—å:** 94.99 –î—ñ—è–ª—å–Ω—ñ—Å—Ç—å —ñ–Ω—à–∏—Ö –≥—Ä–æ–º–∞–¥—Å—å–∫–∏—Ö –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π, –Ω.–≤.—ñ.—É.\n"
        "**–°—Ç–∞–Ω:** –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ\n"
        "**–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:** 09.08.2023\n"
        "**–¢–µ–ª–µ—Ñ–æ–Ω–∏:** 380679849622",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='start')]]),
        parse_mode='Markdown'
    )

@pytest.mark.asyncio
async def test_button_help():
    # Arrange
    mock_update = AsyncMock(Update)
    mock_context = AsyncMock(ContextTypes.DEFAULT_TYPE)
    mock_update.callback_query.data = 'help'
    
    # Act
    await button(mock_update, mock_context)
    
    # Assert
    mock_update.callback_query.edit_message_text.assert_called_once_with(
        "–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞?\n\n"
        "–ó–≤'—è–∂—ñ—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram: [@seksot777](https://t.me/seksot777) –∞–±–æ [@fibonacc1_man](https://t.me/fibonacc1_man)",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='start')]]),
        parse_mode='Markdown'
    )